#!/usr/bin/env php
<?php

// helps to manage dependencies in all `composer.json` files
// Common usages:
//     vendor/bin/mono run composer install
//     vendor/bin/mono run composer update
//     vendor/bin/mono run composer fix
//     vendor/bin/mono run composer lint
//     vendor/bin/mono run composer test

// helps to initialize a subtree split
// Common usages:
//     vendor/bin/mono init-split
//     vendor/bin/mono init-split /path/to/project

function findPackages(string $directory)
{
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($directory, RecursiveDirectoryIterator::SKIP_DOTS),
        RecursiveIteratorIterator::SELF_FIRST
    );

    $composerJsonFiles = [];

    /**
     * @var string $path
     * @var \SplFileInfo $fileInfo
     */
    foreach ($iterator as $path => $fileInfo) {
        $relativePath = str_replace($directory, '', $path);

        if (str_contains($relativePath, DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR)) {
            continue;
        }

        if ($directory ===  dirname($path)) {
            continue;
        }

        if ($fileInfo->isFile() && $fileInfo->getFilename() === 'composer.json') {
            $name = json_decode(file_get_contents($fileInfo->getRealPath()), true)['name'] ?? null;
            $composerJsonFiles[] = [
                'name' => $name,
                'shortname' => $name ? (\explode('/', $name, 2)[1] ?? \explode('/', $name, 2)[0]) : null,
                'directory' => dirname($path),
                'isPackage' => $name !== null && !\in_array($name, [
                    'yiisoft/app',
                    'spiral/app',
                    'mezzio/mezzio-skeleton',
                    'laravel/laravel',
                    'symfony/skeleton',
                    'sulu/skeleton',
                ]),
            ];
        }
    }

    return $composerJsonFiles;
}

function runSingleCommand($directory, $command)
{
    $cwd = getcwd();

    try {
        chdir($directory);

        echo PHP_EOL;
        echo "Mono executes > $command" . PHP_EOL;
        echo PHP_EOL;

        exec($command, $output, $exitCode);

        if ($exitCode !== 0) {
            echo implode(PHP_EOL, $output) . PHP_EOL;

            exit($exitCode);
        }

        echo PHP_EOL;
    } finally {
        chdir($cwd);
    }
}

function renameBranch(array $packages, array $arguments) {
    $currentBranchName = $arguments[0] ?? null;
    $newBranchName = $arguments[1] ?? null;

    if ($currentBranchName === null) {
        throw new \RuntimeException('Current branch name is missing.');
    }

    if ($newBranchName === null) {
        throw new \RuntimeException('New branch name is missing.');
    }

    $options = [
        'http' => [
            'method'  => 'POST',
            'header'  =>
                'Accept: application/vnd.github+json' . "\r\n" .
                'Content-Type: application/x-www-form-urlencoded' . "\r\n" .
                'Authorization: Bearer ' . (getenv('PERSONAL_ACCESS_TOKEN') ?? $_ENV['PERSONAL_ACCESS_TOKEN'] ?? '') . "\r\n" .
                'X-GitHub-Api-Version: 2022-11-28' . "\r\n",
            'content' => \json_encode(['new_name' => $newBranchName], \JSON_THROW_ON_ERROR),
            'timeout' => 10,
        ]
    ];

    \ini_set('user_agent','PHP schranz/mono package 2.0');

    $context  = \stream_context_create($options);

    $exit = 0;

    foreach ($packages as $package) {
        if (!$package['isPackage']) {
            continue;
        }

        [$repositoryOwner, $repositoryName] = \explode('/', $package['name'], 2);

        \error_clear_last();

        $return = @\file_get_contents(
            'https://api.github.com/repos/' . $repositoryOwner . '/' . $repositoryName . '/branches/' . $currentBranchName . '/rename',
            false,
            $context,
        );

        if ($return === false) {
            $error = \error_get_last();

            if (!\str_contains($error['message'], 'Failed to seek to position -1 in the stream')) { // ignore this error as we don't need to read the stream
                ++$exit;

                echo 'Error in "' . $package['name'] . '":' . PHP_EOL . '    ' . $error['message'] . PHP_EOL;
                continue;
            }
        }

        echo 'Renamed branch "' . $currentBranchName . '" to "' . $newBranchName . '" in ' . $package['name'] . PHP_EOL;
    }

    return $exit;
}

function upgradeDependencies(array $packages, array $arguments) {
    $newVersions = [];
    foreach ($arguments as $argument) {
        $data = \json_decode(\file_get_contents('https://repo.packagist.org/p2/' . $argument . '.json'), true, 512, \JSON_THROW_ON_ERROR);
        $lastVersion = $data['packages'][$argument][0]['version_normalized'];
        $newVersionParts = \explode('.', $lastVersion, 3);
        $newVersion = $newVersionParts[0] . '.' . $newVersionParts[1];
        $newVersions[$argument] = $newVersion;
    }

    // Output the result
    foreach ($packages as $package) {
        $directory = \str_replace(getcwd(), '.', $package['directory']);
        $composerFilePath = $directory . '/composer.json';
        if (!file_exists($composerFilePath)) {
            continue;
        }

        $composer = \json_decode(\file_get_contents($composerFilePath), true, 512, \JSON_THROW_ON_ERROR);

        $dependencies = [...($composer['require'] ?? []), ...($composer['require-dev'] ?? [])];

        foreach ($dependencies as $name => $version) {
            if (\in_array($name, ['php'], true) || \str_starts_with($name, 'ext-')) {
                continue;
            }

            if (!\in_array($name, $arguments, true)) {
                continue;
            }

            $isDev = isset($composer['require-dev'][$name]);

            echo 'Upgrade "' . $name . '" from ' . $version . ' to "' . $newVersions[$name] . " in " . $directory . '"' . PHP_EOL;

            runSingleCommand($directory, 'composer require ' . $name . ':^' . $newVersions[$name] . ' --with-all-dependencies' . ' ' . ($isDev ? '--dev' : ''));
        }
    }
}

function runCommand(array $packages, array $arguments) {
    // Output the result
    foreach ($packages as $package) {
        $directory = \str_replace(getcwd(), '.', $package['directory']);
        $title = "`composer.json` found in directory: `" . substr($directory, 2) . '`' . PHP_EOL;
        echo $title;
        echo \str_repeat('=', \strlen($title) - 1) . PHP_EOL;

        if (count($arguments)) {
            runSingleCommand($directory, implode(' ', $arguments));
        }
    }
}

function initSplit(array $packages, array $arguments) {
    $gitUrl = exec('git remote get-url origin');
    if (!$gitUrl && !str_contains($gitUrl, 'github.com') && !str_ends_with($gitUrl, '.git')) {
        throw new \RuntimeException('Could not find remote repository for origin.');
    }

    $gitRootUrl = \explode('/', $gitUrl)[0];

    $projectDir = $arguments[0] ?? getcwd();

    echo PHP_EOL;
    echo 'Init Project' . PHP_EOL;
    echo '============' . PHP_EOL;
    echo PHP_EOL;

    echo 'Create "config.subsplit-publish.json": ' . PHP_EOL;

    if (!file_exists($projectDir . DIRECTORY_SEPARATOR . 'config.subsplit-publish.json')) {
        $config = ['sub-splits' => []];
        foreach ($packages as $package) {
            if (!$package['isPackage']) {
                continue;
            }

            $directory = str_replace(getcwd() . '/', '', $package['directory']);
            $config['sub-splits'][] = [
                'name' => $package['shortname'],
                'directory' => $directory,
                'url' => $gitRootUrl . '/' . $package['shortname'] . '.git',
            ];
        }

        $json = \json_encode($config, \JSON_PRETTY_PRINT | \JSON_UNESCAPED_SLASHES | \JSON_THROW_ON_ERROR);

        \file_put_contents(
            $projectDir . DIRECTORY_SEPARATOR . 'config.subsplit-publish.json',
            $json
        );

        echo ' ->  Done' . PHP_EOL;
    } else {
        echo ' -> Skipped (already exists)' . PHP_EOL;
    }

    echo PHP_EOL;
    echo 'Create ".github/workflows/publish-subsplits.yml": ' . PHP_EOL;
    $filePath = $projectDir .DIRECTORY_SEPARATOR .
        '.github' . DIRECTORY_SEPARATOR. 'workflows' . DIRECTORY_SEPARATOR . 'publish-subsplits.yml';

    if (!file_exists($filePath)) {
        if (!is_dir(dirname($filePath))) {
            mkdir($filePath, 0777, true);
        }

        $githubWorkflow = <<<'EOT'
name: Sub-Split Publishing

on:
    push:
        branches:
            - '[0-9]+.[0-9]+'
    create:
        tags:
            - '*'
    delete:
        tags:
            - '*'

jobs:
    publish_subsplits:
        runs-on: ubuntu-latest
        name: Publish package sub-splits
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: '0'
                  persist-credentials: 'false'

            - uses: frankdejonge/use-github-token@1.0.1
              with:
                  authentication: 'YOUR_USERNAME:${{ secrets.PERSONAL_ACCESS_TOKEN }}'
                  user_name: 'YOUR NAME'
                  user_email: 'YOUR@EMAIL'

            - name: Cache splitsh-lite
              id: splitsh-cache
              uses: actions/cache@v3
              with:
                  path: './.splitsh'
                  key: '${{ runner.os }}-splitsh'

            - uses: frankdejonge/use-subsplit-publish@1.0.0
              with:
                  source-branch: '${{ github.ref_name }}'
                  config-path: './config.subsplit-publish.json'
                  splitsh-path: './.splitsh/splitsh-lite'
                  splitsh-version: 'v1.0.1'

EOT;

        file_put_contents($filePath, $githubWorkflow);

        echo ' -> Done (configure your name, email and username)' . PHP_EOL;
    } else {
        echo ' -> Skipped (already exists)' . PHP_EOL;
    }

    echo PHP_EOL;
    echo 'Make sure to configure PERSONAL_ACCESS_TOKEN in your repository secrets.' . PHP_EOL;
}

$directories = [
    dirname(__DIR__),
];

$arguments = $argv;
unset($arguments[0]);
$command = $arguments[1] ?? null;
unset($arguments[1]);

if (null === $command) {
    echo PHP_EOL;
    echo 'Available commands: ' . PHP_EOL;
    echo '===================' . PHP_EOL;
    echo PHP_EOL;
    echo ' - init-split eg. "vendor/bin/mono init"' . PHP_EOL;
    echo '     Initialize projects mono repository configuration for subtree split' . PHP_EOL;
    echo ' - run <command> <arguments> eg. "vendor/bin/mono run composer install"' . PHP_EOL;
    echo '     Run a command in all found packages' . PHP_EOL;
    echo ' - upgrade-dependency <package_names> eg. "vendor/bin/mono upgrade-dependency phpstan/phpstan rector/rector"' . PHP_EOL;
    echo '     Update one or multiple dependencies in all found packages' . PHP_EOL;
    echo ' - rename-branch <current_branch_name> <new_branch_name> eg. "vendor/bin/mono upgrade-dependency phpstan/phpstan rector/rector"' . PHP_EOL;
    echo '     Rename a specific branch in all found packages Github Repository' . PHP_EOL;

    exit(0);
}

$packages = findPackages(getcwd());
$arguments = \array_values($arguments);

$return = match ($command) {
    'init-split' => initSplit($packages, $arguments),
    'upgrade-dependency' => upgradeDependencies($packages, $arguments),
    'rename-branch' => renameBranch($packages, $arguments),
    'run' => runCommand($packages, $arguments),
    default => exit(1),
};

exit($return);
