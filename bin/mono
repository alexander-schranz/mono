#!/usr/bin/env php
<?php

// helps to manage dependencies in all `composer.json` files
// Common usages:
//     vendor/bin/mono run composer install
//     vendor/bin/mono run composer update
//     vendor/bin/mono run composer fix
//     vendor/bin/mono run composer lint
//     vendor/bin/mono run composer test

function findDirectoriesWithComposerJson(string $directory)
{
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($directory, RecursiveDirectoryIterator::SKIP_DOTS),
        RecursiveIteratorIterator::SELF_FIRST
    );

    $composerJsonFiles = [];
    foreach ($iterator as $path => $fileInfo) {
        $relativePath = str_replace($directory, '', $path);

        if (str_contains($relativePath, DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR)) {
            continue;
        }

        if ($directory ===  dirname($path)) {
            continue;
        }

        if ($fileInfo->isFile() && $fileInfo->getFilename() === 'composer.json') {
            $composerJsonFiles[] = dirname($path);
        }
    }

    return $composerJsonFiles;
}

function runSingleCommand($directory, $command)
{
    $cwd = getcwd();

    try {
        chdir($directory);

        echo "Executing in $directory: " . $command . PHP_EOL;
        exec($command, $output,$exitCode);

        if ($exitCode !== 0) {
            // echo implode(PHP_EOL, $output) . PHP_EOL;

            exit($exitCode);
        }

        echo PHP_EOL;
    } finally {
        chdir($cwd);
    }
}

function runCommand(array $directoriesWithComposerJson, array $arguments) {
    // Output the result
    foreach ($directoriesWithComposerJson as $directory) {
        $directory = str_replace(getcwd(), '.', $directory);
        echo "Composer.json found in directory: " . $directory . PHP_EOL;

        if (count($arguments)) {
            runSingleCommand($directory, implode(' ', $arguments));
        }
    }
}

function init(array $directoriesWithComposerJson, array $arguments) {
    $projectDir = $arguments[0] ?? getcwd();
    if (!file_exists($projectDir . DIRECTORY_SEPARATOR . 'config.subsplit-publish.json')) {
        $config = ['sub-splits' => []];
        foreach ($directoriesWithComposerJson as $directory) {
            $directory = str_replace(getcwd(), '.', $directory);
            $config['sub-splits'][] = [
                'directory' => $directory,
                'url' => '';
        }

        mkdir($projectDir, 0777, true);
    }


    // Output the result
    foreach ($directoriesWithComposerJson as $directory) {
        $directory = str_replace(getcwd(), '.', $directory);
        echo "Composer.json found in directory: " . $directory . PHP_EOL;

        if (count($arguments)) {
            runSingleCommand($directory, implode(' ', $arguments));
        }
    }
}

$directories = [
    dirname(__DIR__),
];

$arguments = $argv;
unset($arguments[0]);
$command = $arguments[1] ?? null;
unset($arguments[1]);

if (null === $command) {
    echo PHP_EOL;
    echo 'Available commands: ' . PHP_EOL;
    echo '===================' . PHP_EOL;
    echo PHP_EOL;
    echo ' - run <command> <arguments> eg. "vendor/bin/mono run composer install"' . PHP_EOL;

    exit(0);
}

$directoriesWithComposerJson = findDirectoriesWithComposerJson(getcwd());

$return = match ($command) {
    'init' => init($directoriesWithComposerJson, $arguments),
    'run' => runCommand($directoriesWithComposerJson, $arguments),
    default => exit(1),
};

exit($return);
